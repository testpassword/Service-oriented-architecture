{"version":3,"sources":["api/EntitiesCRUD_API.ts","components/PresentersGenerator.tsx","components/EditableCell.tsx","api/Dragons.ts","api/Persons.ts","api/Teams.ts","components/EntityTable.tsx","components/ManagementConsole.tsx","index.tsx"],"names":["toJson","res","ok","json","Error","SERVICE1_URL","process","SERVICE2_URL","EntitiesURLs","PERSONS","DRAGONS1","DRAGONS2","TEAMS","EntitiesCRUD_API","entity","fetch","method","then","id","modified","headers","body","JSON","stringify","newbie","buildCreationForm","template","onFinish","filler","Object","keys","filter","it","toLowerCase","map","templateField","Item","label","name","type","Group","optionType","defaultValue","options","vals","format","moment","undefined","str","htmlType","EditableCell","editing","dataIndex","title","inputType","children","record","index","restProps","style","margin","rules","required","message","DRAGON_TYPE","WATER","AIR","FIRE","UNKNOWN","DRAGONS_API","COLOR","GREEN","YELLOW","BROWN","PERSONS_API","TEAMS_API","candidateId","EntityTable","removable","editable","columns","toUpperCase","key","sorter","item1","item2","a","b","length","Date","buildColumnsByObject","useState","items","setItems","isLoading","setIsLoaded","selectedRowKeys","setSelectedRowKeys","isFormVisible","setFormVisibility","searchText","setSearchText","searchedColumn","setSearchedColumn","dragonsTypeStat","setDragonsTypeStat","handleSearch","selectedKeys","confirm","handleReset","clearFilters","useEffect","formData","expanded","split","slice","coordinates","x","y","z","catch","err","error","mergedColumns","col","filterDropdown","setSelectedKeys","placeholder","value","onChange","e","target","onPressEnter","icon","SearchOutlined","onClick","filterIcon","filtered","color","onFilter","toString","includes","render","text","highlightStyle","backgroundColor","padding","searchWords","autoEscape","textToHighlight","push","fixed","_","Link","content","filteredFormData","find","parse","answer","success","msg","warning","actions","console","info","shape","danger","CloseOutlined","size","visible","PlusOutlined","ghost","DeleteOutlined","disabled","Promise","all","trigger","onVisibleChange","stat","DeleteColumnOutlined","Search","onSearch","isNaN","data","enterButton","LeftOutlined","caveParams","FunctionOutlined","NodeExpandOutlined","teamId","personId","membersIds","className","rowSelection","selected","selections","Table","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","dataSource","loading","components","cell","pagination","position","defaultProps","enumFields","Map","ManagementConsole","personsTable","dragonsTable","teamsTable","table","setTable","menuIsCollapsed","setMenuCollapsed","minHeight","Sider","collapsible","collapsed","onCollapse","defaultSelectedKeys","mode","UserOutlined","DingdingOutlined","TeamOutlined","Content","Footer","textAlign","href","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e469869c.chunk.js","sourcesContent":["const toJson = res => {\n    if (res.ok) return res.json()\n    else throw new Error(res.json())\n}\n\nconst SERVICE1_URL = process.env.REACT_APP_SERVICE1_URL\nconst SERVICE2_URL = process.env.REACT_APP_SERVICE2_URL\n\n\nconst EntitiesURLs = {\n    PERSONS: `${SERVICE1_URL}/api/persons/`,\n    DRAGONS1: `${SERVICE1_URL}/api/dragons/`,\n    DRAGONS2: `${SERVICE2_URL}/api/dragons/`,\n    TEAMS: `${SERVICE2_URL}/api/teams/`\n}\n\nconst EntitiesCRUD_API = {\n\n    getAll: <T>(entity: object): Promise<T> => fetch(`${entity}`, { method: 'GET'}).then(toJson),\n\n    getById: <T>(entity: object, id: number): Promise<T> => fetch(`${entity}${id}`, { method: 'GET' }).then(toJson),\n\n    updateById: <T>(entity: object, id: number, modified: object): Promise<T> =>\n        fetch(`${entity}${id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(modified)\n        }).then(toJson),\n\n    add: <T>(entity: object, newbie: object): Promise<T> =>\n        fetch(`${entity}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(newbie)\n        }).then(toJson),\n\n    delete: <T>(entity: object, id: number): Promise<T> => fetch(`${entity}${id}`, { method: 'DELETE' }).then(toJson),\n}\n\nexport { EntitiesCRUD_API, EntitiesURLs, toJson }","// @ts-nocheck\nimport { Button, DatePicker, Form, Input, InputNumber, Radio } from \"antd\"\nimport React from \"react\"\nimport moment from \"moment\"\n\ninterface AntdColumn {\n    title: string,\n    key: string,\n    dataIndex: string,\n    editable: boolean,\n    inputType: string,\n    sorter: Function\n}\n\n/**\n * Creates columns for Antd.Table by template\n * @param template - object which contains column name and it's type\n */\nconst buildColumnsByObject = (template: object): Array<AntdColumn> =>\n    Object.keys(template).map(it => ({\n        title: it.toUpperCase(),\n        key: it,\n        dataIndex: it,\n        editable: it !== 'id',\n        inputType: template[it].type,\n        sorter: (item1: object, item2: object) => {\n            const a = item1[it]\n            const b = item2[it]\n            const type = template[it].type\n            if (type === 'number') return a - b\n            if (type === 'string') return a.length - b.length\n            if (type === 'boolean') return a && b\n            if (type === 'date') return new Date(a) - new Date(b)\n            else return undefined\n        }\n    })).filter( it => it !== undefined && it !== null )\n\n/**\n * Creates Antd.Form by template\n * @param template - object which contains column name and it's type\n * @param onFinish - action which execute on 'Submit` click\n * @param filler - fill defaultValue in form by filler object\n */\nconst buildCreationForm = (template: object,\n                           onFinish: (any) => void,\n                           filler: object = {}): JSX.Element =>\n    <Form onFinish={onFinish}> {\n\n        Object.keys(template).filter(it => it.toLowerCase() !== 'id').map(it => {\n            const getInput = (templateField: object): React.FC => {\n                if (templateField.type === 'enum') return <Radio.Group optionType=\"button\"\n                                                                       defaultValue={ filler[it] }\n                                                                       options={ template[it].vals }/>\n                if (templateField.type === 'number') return <InputNumber defaultValue={ filler[it] }/>\n                if (templateField.type === 'date') return <DatePicker format={ \"DD.MM.YYYY\" }\n                                                                      defaultValue={ moment() }/>\n                if (templateField.type === 'array' && filler[it] !== undefined) return <Input defaultValue={str}/>\n                else return <Input defaultValue={ filler[it] }/>\n            }\n            return <Form.Item label={ it.toLowerCase() }\n                              name={ it }>\n                { getInput( template[it]) }\n            </Form.Item>\n        })\n    }\n    <Form.Item>\n        <Button type=\"primary\"\n                htmlType=\"submit\">\n            Submit\n        </Button>\n    </Form.Item>\n    </Form>\n\nexport { buildColumnsByObject, buildCreationForm }\nexport type { AntdColumn }","import React from \"react\"\nimport { Form, Input, InputNumber } from \"antd\"\n\nconst EditableCell: React.FC<{\n    editing: boolean, dataIndex: string, title: string, inputType: string, record: object, index: number }> =\n    ({ editing, dataIndex, title, inputType, record, index, children, ...restProps }) =>\n        <td {...restProps}>\n            {editing ?\n                <Form.Item\n                    name={ dataIndex }\n                    style={{ margin: 0 }}\n                    rules={[{ required: true, message: `Please Input ${title}!` }]}\n                >\n                    { inputType === \"number\" ? <InputNumber /> : <Input /> }\n                </Form.Item>\n                : children\n            }\n        </td>\n\nexport default EditableCell","import { EntitiesURLs, toJson } from \"./EntitiesCRUD_API\"\n\nconst DRAGON_TYPE = {\n    WATER: 'geekblue',\n    AIR: 'blue',\n    FIRE: 'volcano',\n    UNKNOWN: 'magenta'\n}\n\nconst DRAGONS_API = {\n\n    getGroupedByType: <T>(): Promise<T> => fetch(`${EntitiesURLs.DRAGONS1}grouped_by_type`, { method: 'GET'}).then(toJson),\n\n    findWithKillerWeakerThen: <T>(id: number): Promise<T> => fetch(`${EntitiesURLs.DRAGONS1}find_with_killer_weaker_then?killer_id=${id}`, { method: 'GET'}).then(toJson),\n\n    findByCaveDepth: <T>(type: string): Promise<T> => fetch(`${EntitiesURLs.DRAGONS2}find_by_cave_depth?type=${type}`, { method: 'GET' }).then(toJson)\n}\n\nexport { DRAGONS_API, DRAGON_TYPE }","import { EntitiesURLs, toJson } from \"./EntitiesCRUD_API\"\n\nconst COLOR = {\n    GREEN: 'green',\n    YELLOW: 'yellow',\n    BROWN: 'gold'\n}\n\nconst PERSONS_API = {\n\n    getIncludedInName: <T>(name: string): Promise<T> => {\n        return fetch(`${EntitiesURLs.PERSONS}find_person_included_in_name?name=${name}`, { method: 'GET' }).then(toJson)\n    },\n}\n\nexport { PERSONS_API, COLOR }","import { EntitiesURLs, toJson } from \"./EntitiesCRUD_API\"\n\nconst TEAMS_API = {\n\n    bindPersonToTeam: <T>(id: number, candidateId: number): Promise<T> => fetch(`${EntitiesURLs.TEAMS}${id}?candidate_id=${candidateId}`, { method: 'POST'}).then(toJson),\n}\n\nexport { TEAMS_API }","// @ts-nocheck\nimport React, { useEffect, useState } from \"react\"\nimport { EntitiesURLs, EntitiesCRUD_API } from \"../api/EntitiesCRUD_API\"\nimport {\n    Table, Input, Typography,\n    Layout, Space, Button,\n    message, Popover, Tag,\n    Radio, InputNumber, Form\n} from \"antd\"\nimport { Content, Header } from \"antd/lib/layout/layout\"\nimport {\n    CloseOutlined, DeleteOutlined, PlusOutlined,\n    SearchOutlined, DeleteColumnOutlined, LeftOutlined,\n    FunctionOutlined, NodeExpandOutlined } from \"@ant-design/icons\"\nimport { AntdColumn, buildColumnsByObject, buildCreationForm } from \"./PresentersGenerator\"\nimport Highlighter from 'react-highlight-words'\nimport EditableCell from \"./EditableCell\"\nimport { DRAGON_TYPE, DRAGONS_API } from \"../api/Dragons\"\nimport { PERSONS_API } from \"../api/Persons\"\nimport {TEAMS_API} from \"../api/Teams\";\n\nconst EntityTable: React.FC<{ entity: EntitiesURLs, template: object, removable: boolean, editable: boolean }> =\n    ({ entity, template, removable, editable }) => {\n\n    const columns = buildColumnsByObject(template)\n    const [items, setItems] = useState<Array<object>>([])\n    const [isLoading, setIsLoaded] = useState<boolean>(true)\n    const [selectedRowKeys, setSelectedRowKeys] = useState<Array<number>>([])\n    const [isFormVisible, setFormVisibility] = useState<boolean>(false)\n    const [searchText, setSearchText] = useState<string>('')\n    const [searchedColumn, setSearchedColumn] = useState<string>('')\n\n    const [dragonsTypeStat, setDragonsTypeStat] = useState<string>('')\n\n    const getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div>\n                <Input placeholder={ `Search ${dataIndex}` }\n                       value={ selectedKeys[0] }\n                       onChange={ e => setSelectedKeys(e.target.value ? [e.target.value] : []) }\n                       onPressEnter={ () => handleSearch(selectedKeys, confirm, dataIndex) }\n                />\n                <Space>\n                    <Button type=\"primary\"\n                            icon={ <SearchOutlined/> }\n                            onClick={ () => handleSearch(selectedKeys, confirm, dataIndex) }\n                    >\n                        Search\n                    </Button>\n                    <Button onClick={ () => handleReset(clearFilters) }>\n                        Reset\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }}/>,\n        onFilter: (value, record) => record[dataIndex] ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()) : '',\n        render: (text: string) =>\n            searchedColumn === dataIndex ?\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={ [searchText] }\n                    autoEscape\n                    textToHighlight={ text?.toString() ?? '' }\n                />\n             : text\n    })\n\n    const handleSearch = (selectedKeys: Array<string>, confirm: Function, dataIndex: string) => {\n        confirm()\n        setSearchText(selectedKeys[0])\n        setSearchedColumn(dataIndex)\n    }\n\n    const handleReset = clearFilters => {\n        clearFilters()\n        setSearchText('')\n    }\n\n    useEffect(() => {\n        EntitiesCRUD_API.getAll(entity)\n            .then( formData => {\n                setIsLoaded(false)\n                setItems(formData.map( it => {\n                    const expanded = { ...it, key: it.id }\n                    if (entity.split('/').slice(-2)[0] === 'dragons') {\n                        expanded['x'] = it.coordinates.x\n                        expanded['y'] = it.coordinates.y\n                        expanded['z'] = it.coordinates.z\n                        delete expanded.coordinates\n                    }\n                    return expanded\n                })\n                )\n            }).catch( err => message.error(err) )\n    }, [entity])\n\n    const mergedColumns = [...columns.map( (col: AntdColumn) => ({ ...col, ...getColumnSearchProps(col.dataIndex) }))]\n    if (editable) mergedColumns.push({\n        title: \"ACTIONS\",\n        dataIndex: \"actions\",\n        fixed: 'right',\n        render: (_, record) =>\n            <Typography.Link>\n                <Popover content={buildCreationForm(template, formData => {\n                    const filteredFormData = items.filter(it => it.id == record.id)[0]\n                    const modified = {\n                        ...items.find(it => it.id == record.id),\n                        ...JSON.parse(JSON.stringify(formData)) // быстро удалить все пустые пары ключ-значение из объекта\n                    }\n                    if (Object.keys(filteredFormData).length !== 0) {\n                        EntitiesCRUD_API.updateById(entity, record.id, modified)\n                            .then(answer => {\n                                setItems([...items.filter(it => it.id !== record.id), modified])\n                                message.success(answer.msg)\n                            })\n                            .catch(err => message.error(err.message))\n                    } else message.warning('Nothing to modify')\n                }, record)}>\n                    Edit\n                </Popover>\n            </Typography.Link>\n        })\n\n    const actions = [\n        <Popover\n            content={\n                <div>{\n                    buildCreationForm(template, formData => {\n                        EntitiesCRUD_API.add(entity, formData)\n                            .then( answer => {\n                                console.info(answer)\n                                setItems([...items, {...formData, id: answer}])\n                                setFormVisibility(false)\n                            })\n                            .catch( err => message.error(err) )\n                    })\n                }\n                <Button shape=\"round\"\n                        danger\n                        icon={ <CloseOutlined/> }\n                        size=\"small\"\n                        onClick={ () => setFormVisibility(false) }\n                />\n                </div>\n            }\n            visible={ isFormVisible }>\n            <Button type=\"primary\"\n                    icon={ <PlusOutlined/> }\n                    ghost={ true }\n                    onClick={ () => setFormVisibility(true) }\n            >\n                Add record\n            </Button>\n        </Popover>,\n        <Button icon={ <DeleteOutlined/> }\n                ghost={ true }\n                disabled={!removable}\n                danger\n                onClick={ () => {\n                    if (selectedRowKeys.length === 0) message.warning('Nothing is selected')\n                    else Promise.all(selectedRowKeys.map( it =>\n                        EntitiesCRUD_API.delete(entity, it) ))\n                        .then( () => {\n                            setItems(items.filter( it => !selectedRowKeys.includes(it['id']) ))\n                            message.success('All entities was deleted')\n                        })\n                }}>\n            Remove\n        </Button>\n    ]\n    // да, так делать нельзя, но сроки...\n    switch (entity.split('/').slice(-2)[0]) {\n        case 'dragons':\n            actions.push(\n                <Popover trigger=\"hover\"\n                         onVisibleChange={ visible => {\n                             if (visible) DRAGONS_API.getGroupedByType().then( stat => setDragonsTypeStat(stat) )\n                         } }\n                         content={\n                             Object.keys(dragonsTypeStat).map( it =>\n                                 <Tag color={ DRAGON_TYPE[it] }>{it} = {dragonsTypeStat[it]}</Tag>\n                             )\n                         }\n                         title=\"Count dragons by type\"\n                >\n                    <Button icon={ <DeleteColumnOutlined/> }\n                            ghost={ true }\n                    >\n                        Statistic\n                    </Button>\n                </Popover>\n            )\n            actions.push(\n                <Popover trigger=\"click\"\n                         content={\n                             <Input.Search onSearch={\n                                 id => {\n                                     if (isNaN(id)) message.error('You should write id number of killer')\n                                     else DRAGONS_API.findWithKillerWeakerThen(id)\n                                         .then(data => {\n                                             if (data.length !== 0) setItems(data)\n                                             else message.warning(`There are no dragons with a killer weaker then killer#${id}`)\n                                         })\n                                 }}\n                                           enterButton\n                                           placeholder=\"id\"\n                             />\n                         }\n                >\n                    <Button icon={ <LeftOutlined/> }\n                            ghost={ true }\n                    >\n                        Find with killer weaker then\n                    </Button>\n                </Popover>\n            )\n            const caveParams = [\"MIN\", \"MAX\"]\n            actions.push(\n                <Popover trigger=\"click\"\n                         content={\n                             <Radio.Group optionType=\"button\"\n                                          defaultValue={ caveParams[0] }\n                                          options={ caveParams }\n                                          onChange={\n                                              e => {\n                                                  DRAGONS_API.findByCaveDepth(e.target.value)\n                                                      .then(data => {\n                                                          if (data.length !== 0) setItems(data)\n                                                          else message.warning(`There are no dragons now`)\n                                                      })\n                                              }\n                                          }\n                             />\n                         }\n                >\n                    <Button icon={ <FunctionOutlined /> }\n                            ghost={ true }>\n                        Find with deepest/highest cave\n                    </Button>\n                </Popover>\n            )\n            break\n        case 'persons':\n            actions.push(\n                <Popover trigger=\"click\"\n                         content={\n                             <Input.Search onSearch={\n                                 name => {\n                                     PERSONS_API.getIncludedInName(name)\n                                         .then(data => {\n                                             if (data.length !== 0) setItems(data)\n                                             else message.warning(`There are no persons included in name ${name}`)\n                                         })\n                                 }}\n                                           enterButton\n                                           placeholder=\"name\"\n                             />\n                         }\n                >\n                    <Button icon={ <NodeExpandOutlined/> }\n                            ghost={ true }\n                    >\n                        Find person included in name\n                    </Button>\n                </Popover>\n            )\n            break\n        case 'teams':\n            actions.push(\n                <Popover trigger=\"click\"\n                         content={\n                             <Form onFinish={ formData => {\n                                 TEAMS_API.bindPersonToTeam(formData.teamId, formData.personId)\n                                     .then( answer => {\n                                         message.success(answer)\n                                         items\n                                             .find( it => it.teamId == formData.teamId )\n                                             .membersIds\n                                             .push(formData.personId)\n                                         setItems(items)\n                                     })\n                                     .catch( e => message.error(e) )\n                             }}>\n                                 <Form.Item label=\"teamId\" name=\"teamId\" required={true}>\n                                     <InputNumber placeholder=\"teamId\"/>\n                                 </Form.Item>\n                                 <Form.Item label=\"personId\" name=\"personId\" required={true}>\n                                     <InputNumber placeholder=\"personId\"/>\n                                 </Form.Item>\n                                 <Form.Item>\n                                     <Button type=\"primary\"\n                                             htmlType=\"submit\">\n                                         Submit\n                                     </Button>\n                                 </Form.Item>\n                             </Form>\n                         }\n                >\n                    <Button icon={ <NodeExpandOutlined /> }\n                            ghost={ true }\n                            >\n                        Bind person to team\n                    </Button>\n                </Popover>\n            )\n    }\n\n    return <Layout className=\"site-layout\">\n        <Header>\n            <Space>\n                { actions }\n            </Space>\n        </Header>\n        <Content>\n            <Table columns={ mergedColumns }\n                   rowSelection={{\n                       selectedRowKeys,\n                       onChange: selected => setSelectedRowKeys(selected),\n                       selections: [ Table.SELECTION_ALL, Table.SELECTION_INVERT, Table.SELECTION_NONE ]\n                   }}\n                   dataSource={ items }\n                   loading={ isLoading }\n                   components={{\n                       body: { cell: EditableCell }\n                   }}\n                   pagination={{\n                       position: [\"bottomCenter\"] }\n                   }\n            />\n        </Content>\n    </Layout>\n}\nEntityTable.defaultProps = { enumFields: new Map() }\n\nexport default EntityTable","import '../resources/App.css'\nimport { Layout, Menu } from \"antd\"\nimport { DingdingOutlined, UserOutlined, TeamOutlined } from '@ant-design/icons'\nimport React, { useState } from \"react\"\nimport { EntitiesURLs } from \"../api/EntitiesCRUD_API\"\nimport EntityTable from \"./EntityTable\"\nimport { COLOR } from \"../api/Persons\"\nimport { DRAGON_TYPE } from \"../api/Dragons\"\n\n\nconst ManagementConsole: React.FC = () => {\n    const personsTable = <EntityTable entity={ EntitiesURLs.PERSONS }\n                                      template={{\n                                          'id': { type: 'number' },\n                                          'name': { type: 'string' },\n                                          'height': { type: 'number' },\n                                          'weight': { type: 'number' },\n                                          'passportId': { type: 'string' },\n                                          'hairColor': {\n                                              type: 'enum',\n                                              vals: Object.keys(COLOR)\n                                          }\n                                      }}\n                                      removable={true}\n                                      editable={true}\n    />\n    const dragonsTable = <EntityTable entity={ EntitiesURLs.DRAGONS1 }\n                                      template={{\n                                          'id': { type: 'number' },\n                                          'name': { type: 'string' },\n                                          'creationDate': { type: 'date' },\n                                          'age': { type: 'number' },\n                                          'wingspan': { type: 'number' },\n                                          'color': {\n                                              type: 'enum',\n                                              vals: Object.keys(COLOR)\n                                          },\n                                          'type': {\n                                              type: 'enum',\n                                              vals: Object.keys(DRAGON_TYPE)\n                                          },\n                                          'x': { type: 'number' },\n                                          'y': { type: 'number' },\n                                          'z': { type: 'number' },\n                                          'killerId': { type: 'number' }\n                                      }}\n                                      removable={true}\n                                      editable={true}\n    />\n    const teamsTable = <EntityTable entity={ EntitiesURLs.TEAMS }\n                                    template={{\n                                        'id': { type: 'number' },\n                                        'name': { type: 'string' },\n                                        'membersIds': { type: 'array' }\n                                    }}\n                                    removable={false}\n                                    editable={false}\n    />\n    const [table, setTable] = useState<JSX.Element>(personsTable)\n    const [menuIsCollapsed, setMenuCollapsed] = useState<boolean>(false)\n    return <Layout style={{ minHeight: '100vh' }}>\n        <Layout.Sider collapsible\n                      collapsed={ menuIsCollapsed }\n                      onCollapse={ () => setMenuCollapsed(!menuIsCollapsed) }\n        >\n            <Menu defaultSelectedKeys={['1']} mode=\"inline\">\n                <Menu.Item icon={<UserOutlined/>}\n                           onClick={() => setTable(personsTable)}>\n                    Persons\n                </Menu.Item>\n                <Menu.Item icon={<DingdingOutlined/>}\n                           onClick={() => setTable(dragonsTable)}>\n                    Dragons\n                </Menu.Item>\n                <Menu.Item icon={<TeamOutlined/>}\n                           onClick={() => setTable(teamsTable)}>\n                    Teams\n                </Menu.Item>\n            </Menu>\n        </Layout.Sider>\n        <Layout className=\"site-layout\">\n            <Layout.Content>\n                <div className=\"site-layout-background\" style={{ minHeight: 360 }}>\n                    { table }\n                </div>\n            </Layout.Content>\n            <Layout.Footer style={{ textAlign: \"center\"}}>\n                <a href={ \"https://se.ifmo.ru/~s265570/cv/\" }>\n                    Kulbako Artemy 2021\n                </a>\n            </Layout.Footer>\n        </Layout>\n    </Layout>\n}\n\nexport default ManagementConsole","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './resources/index.css'\nimport ManagementConsole from './components/ManagementConsole'\n\nReactDOM.render(\n    <React.StrictMode>\n        <ManagementConsole />\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}