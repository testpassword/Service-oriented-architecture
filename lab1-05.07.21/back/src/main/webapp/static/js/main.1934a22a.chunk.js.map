{"version":3,"sources":["api/EntitiesCRUD_API.ts","components/PresentersGenerator.tsx","components/EditableCell.tsx","api/Dragons.ts","api/Persons.ts","components/EntityTable.tsx","components/ManagementConsole.tsx","index.tsx"],"names":["EntitiesURLs","toJson","res","ok","json","Error","EntitiesCRUD_API","entity","fetch","method","then","id","modifiedData","headers","body","JSON","stringify","newbie","buildCreationForm","template","onFinish","requiredFields","filler","Object","keys","filter","it","toLowerCase","map","templateField","Item","label","name","rules","required","includes","type","Group","optionType","defaultValue","options","vals","format","moment","htmlType","EditableCell","editing","dataIndex","title","inputType","children","record","index","restProps","style","margin","message","DRAGON_TYPE","WATER","AIR","FIRE","UNKNOWN","DRAGONS_API","DRAGONS","COLOR","GREEN","YELLOW","BROWN","PERSONS_API","PERSONS","EntityTable","columns","toUpperCase","key","editable","sorter","item1","item2","a","b","length","Date","undefined","buildColumnsByObject","useState","items","setItems","isLoading","setIsLoaded","selectedRowKeys","setSelectedRowKeys","isFormVisible","setFormVisibility","searchText","setSearchText","searchedColumn","setSearchedColumn","dragonsTypeStat","setDragonsTypeStat","handleSearch","selectedKeys","confirm","handleReset","clearFilters","useEffect","data","expanded","split","slice","coordinates","x","y","catch","err","error","mergedColumns","col","filterDropdown","setSelectedKeys","placeholder","value","onChange","e","target","onPressEnter","icon","SearchOutlined","onClick","filterIcon","filtered","color","onFilter","toString","render","text","highlightStyle","backgroundColor","padding","searchWords","autoEscape","textToHighlight","fixed","_","Link","content","formData","filteredFormData","parse","answer","success","msg","warning","actions","shape","danger","CloseOutlined","size","visible","PlusOutlined","ghost","DeleteOutlined","Promise","all","push","trigger","onVisibleChange","stat","DeleteColumnOutlined","Search","onSearch","isNaN","enterButton","LeftOutlined","MehOutlined","className","rowSelection","selected","selections","Table","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","dataSource","loading","components","cell","pagination","position","defaultProps","enumFields","Map","ManagementConsole","personsTable","dragonsTable","table","setTable","menuIsCollapsed","setMenuCollapsed","minHeight","Sider","collapsible","collapsed","onCollapse","defaultSelectedKeys","mode","UserOutlined","DingdingOutlined","Content","Footer","textAlign","href","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1934a22a.chunk.js","sourcesContent":["const toJson = res => {\n    if (res.ok) return res.json()\n    else throw new Error(res.json())\n}\n\n// change both URLs to http://localhost:9090/back-1.0-ULTIMATE/... before deploy to WAR\n\n/* да, правильнее было бы пробрасывать корень урла через REACT_APP_ROOT_URL, но, к сожалению,\nenum TypeScript должен быть известен во время сборки, поэтому переменные не подходят, а мне очень уж хотелось\nпопробовать enum\n */\nenum EntitiesURLs {\n    PERSONS = `http://localhost:9090/back-1.0-ULTIMATE/api/persons/`,\n    DRAGONS = `http://localhost:9090/back-1.0-ULTIMATE/api/dragons/`\n}\n\nconst EntitiesCRUD_API = {\n\n    getAll: <T>(entity: EntitiesURLs): Promise<T> => {\n        return fetch(entity, { method: 'GET'}).then(toJson)\n    },\n\n    getById: <T>(entity: EntitiesURLs, id: number): Promise<T> => {\n        return fetch(`${entity}${id}`, { method: 'GET' }).then(toJson)\n    },\n\n    updateById: <T>(entity: EntitiesURLs, id: number, modifiedData: object): Promise<T> => {\n        return fetch(`${entity}${id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(modifiedData)\n        }).then(toJson)\n    },\n\n    add: <T>(entity: EntitiesURLs, newbie: object): Promise<T> => {\n        return fetch(entity, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(newbie)\n        }).then(toJson)\n    },\n\n    delete: <T>(entity: EntitiesURLs, id: number): Promise<T> => {\n        return fetch(`${entity}${id}`, { method: 'DELETE' }).then(toJson)\n    },\n}\n\nexport { EntitiesCRUD_API, EntitiesURLs, toJson }","// @ts-nocheck\nimport { Button, DatePicker, Form, Input, InputNumber, Radio } from \"antd\"\nimport React from \"react\"\nimport moment from \"moment\"\n\ninterface AntdColumn {\n    title: string,\n    key: string,\n    dataIndex: string,\n    editable: boolean,\n    inputType: string,\n    sorter: Function\n}\n\n/**\n * Creates columns for Antd.Table by template\n * @param template - object which contains column name and it's type\n */\nconst buildColumnsByObject = (template: object): Array<AntdColumn> =>\n    Object.keys(template).map(it => ({\n        title: it.toUpperCase(),\n        key: it,\n        dataIndex: it,\n        editable: it !== 'id',\n        inputType: template[it].type,\n        sorter: (item1: object, item2: object) => {\n            const a = item1[it]\n            const b = item2[it]\n            const type = template[it].type\n            if (type === 'number') return a - b\n            if (type === 'string') return a.length - b.length\n            if (type === 'boolean') return a && b\n            if (type === 'date') return new Date(a) - new Date(b)\n            else return undefined\n        }\n    })).filter( it => it !== undefined && it !== null )\n\n/**\n * Creates Antd.Form by template\n * @param template - object which contains column name and it's type\n * @param onFinish - action which execute on 'Submit` click\n * @param requiredFields - defines which Form.Item was required for fill\n * @param filler - fill defaultValue in form by filler object\n */\nconst buildCreationForm = (template: object,\n                           onFinish: (any) => void,\n                           requiredFields: Array<string> = [],\n                           filler: object = {}): JSX.Element =>\n    <Form onFinish={onFinish}> {\n        Object.keys(template).filter(it => it.toLowerCase() !== 'id').map(it => {\n            const getInput = (templateField: object): React.FC => {\n                if (templateField.type === 'enum') return <Radio.Group optionType=\"button\"\n                                                                       defaultValue={ filler[it] }\n                                                                       options={ template[it].vals }/>\n                if (templateField.type === 'number') return <InputNumber defaultValue={ filler[it] }/>\n                if (templateField.type === 'date') return <DatePicker format={ \"DD.MM.YYYY\" }\n                                                                      defaultValue={ moment() }/>\n                else return <Input defaultValue={ filler[it] }/>\n            }\n            return <Form.Item label={ it.toLowerCase() }\n                              name={ it }\n                              rules={ [{required: requiredFields.includes(it)}] }>\n                { getInput( template[it]) }\n            </Form.Item>\n        })\n    }\n    <Form.Item>\n        <Button type=\"primary\"\n                htmlType=\"submit\">\n            Submit\n        </Button>\n    </Form.Item>\n    </Form>\n\nexport { buildColumnsByObject, buildCreationForm }\nexport type { AntdColumn }","import React from \"react\"\nimport { Form, Input, InputNumber } from \"antd\"\n\nconst EditableCell: React.FC<{\n    editing: boolean, dataIndex: string, title: string, inputType: string, record: object, index: number }> =\n    ({ editing, dataIndex, title, inputType, record, index, children, ...restProps }) =>\n        <td {...restProps}>\n            {editing ?\n                <Form.Item\n                    name={ dataIndex }\n                    style={{ margin: 0 }}\n                    rules={[{ required: true, message: `Please Input ${title}!` }]}\n                >\n                    { inputType === \"number\" ? <InputNumber /> : <Input /> }\n                </Form.Item>\n                : children\n            }\n        </td>\n\nexport default EditableCell","import { EntitiesURLs, toJson } from \"./EntitiesCRUD_API\"\n\nconst DRAGON_TYPE = {\n    WATER: 'geekblue',\n    AIR: 'blue',\n    FIRE: 'volcano',\n    UNKNOWN: 'magenta'\n}\n\nconst DRAGONS_API = {\n\n    getGroupedByType: <T>(): Promise<T> => {\n        return fetch(`${EntitiesURLs.DRAGONS}grouped_by_type`, { method: 'GET'}).then(toJson)\n    },\n\n    findWithKillerWeakerThen: <T>(id: number): Promise<T> => {\n        return fetch(`${EntitiesURLs.DRAGONS}find_with_killer_weaker_then?killer_id=${id}`, { method: 'GET'}).then(toJson)\n    }\n}\n\nexport { DRAGONS_API, DRAGON_TYPE }","import { EntitiesURLs, toJson } from \"./EntitiesCRUD_API\"\n\nconst COLOR = {\n    GREEN: 'green',\n    YELLOW: 'yellow',\n    BROWN: 'gold'\n}\n\nconst PERSONS_API = {\n\n    getIncludedInName: <T>(name: string): Promise<T> => {\n        return fetch(`${EntitiesURLs.PERSONS}find_person_included_in_name?name=${name}`, { method: 'GET' }).then(toJson)\n    },\n}\n\nexport { PERSONS_API, COLOR }","// @ts-nocheck\nimport React, { useEffect, useState } from \"react\"\nimport { EntitiesURLs, EntitiesCRUD_API } from \"../api/EntitiesCRUD_API\"\nimport { Table, Input, Typography, Layout, Space, Button, message, Popover, Tag } from \"antd\"\nimport { Content, Header } from \"antd/lib/layout/layout\"\nimport { CloseOutlined, DeleteOutlined, PlusOutlined, SearchOutlined, DeleteColumnOutlined, LeftOutlined, MehOutlined } from \"@ant-design/icons\"\nimport { AntdColumn, buildColumnsByObject, buildCreationForm } from \"./PresentersGenerator\"\nimport Highlighter from 'react-highlight-words'\nimport EditableCell from \"./EditableCell\"\nimport { DRAGON_TYPE, DRAGONS_API } from \"../api/Dragons\"\nimport { PERSONS_API } from \"../api/Persons\"\n\nconst EntityTable: React.FC<{ entity: EntitiesURLs, template: object }> =\n    ({ entity, template }) => {\n\n    const columns = buildColumnsByObject(template)\n    const [items, setItems] = useState<Array<object>>([])\n    const [isLoading, setIsLoaded] = useState<boolean>(true)\n    const [selectedRowKeys, setSelectedRowKeys] = useState<Array<number>>([])\n    const [isFormVisible, setFormVisibility] = useState<boolean>(false)\n    const [searchText, setSearchText] = useState<string>('')\n    const [searchedColumn, setSearchedColumn] = useState<string>('')\n\n    const [dragonsTypeStat, setDragonsTypeStat] = useState<string>('')\n\n    const getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div>\n                <Input placeholder={ `Search ${dataIndex}` }\n                       value={ selectedKeys[0] }\n                       onChange={ e => setSelectedKeys(e.target.value ? [e.target.value] : []) }\n                       onPressEnter={ () => handleSearch(selectedKeys, confirm, dataIndex) }\n                />\n                <Space>\n                    <Button type=\"primary\"\n                            icon={ <SearchOutlined/> }\n                            onClick={ () => handleSearch(selectedKeys, confirm, dataIndex) }\n                    >\n                        Search\n                    </Button>\n                    <Button onClick={ () => handleReset(clearFilters) }>\n                        Reset\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }}/>,\n        onFilter: (value, record) => record[dataIndex] ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()) : '',\n        render: (text: string) =>\n            searchedColumn === dataIndex ?\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={ [searchText] }\n                    autoEscape\n                    textToHighlight={ text?.toString() ?? '' }\n                />\n             : text\n    })\n\n    const handleSearch = (selectedKeys: Array<string>, confirm: Function, dataIndex: string) => {\n        confirm()\n        setSearchText(selectedKeys[0])\n        setSearchedColumn(dataIndex)\n    }\n\n    const handleReset = clearFilters => {\n        clearFilters()\n        setSearchText('')\n    }\n\n    useEffect(() => {\n        EntitiesCRUD_API.getAll(entity)\n            .then( data => {\n                setIsLoaded(false)\n                setItems(data.map( it => {\n                    let expanded = { ...it, key: it.id }\n                    if (entity.split('/').slice(-2)[0] === 'dragons') {\n                        expanded['x'] = it.coordinates.x\n                        expanded['y'] = it.coordinates.y\n                        delete expanded.coordinates\n                    }\n                    return expanded\n                })\n                )\n            }).catch( err => message.error(err) )\n    }, [entity])\n\n    const mergedColumns = [...columns.map( (col: AntdColumn) => ({ ...col, ...getColumnSearchProps(col.dataIndex) })), {\n        title: \"ACTIONS\",\n        dataIndex: \"actions\",\n        fixed: 'right',\n        render: ( _, record ) =>\n            <Typography.Link>\n                <Popover content={ buildCreationForm(template, formData => {\n                    const filteredFormData = JSON.parse(JSON.stringify(formData)) // быстро удалить все пустые пары ключ-значение из объекта\n                    if (Object.keys(filteredFormData).length !== 0) {\n                        EntitiesCRUD_API.updateById(entity, record.id, filteredFormData)\n                            .then( answer => {\n                                setItems([...items.filter(it => it.id !== record.id), {...record, ...filteredFormData}])\n                                message.success(answer.msg)\n                            })\n                            .catch( err => message.error(err.message) )\n                    } else message.warning('Nothing to modify')\n                }, [], record) }>\n                    Edit\n                </Popover>\n            </Typography.Link>\n    }]\n\n    const actions = [\n        <Popover\n            content={\n                <div>{\n                    buildCreationForm(template, formData => {\n                        EntitiesCRUD_API.add(entity, formData)\n                            .then( answer => {\n                                setItems([...items, {...formData, id: answer.id}])\n                                setFormVisibility(false)\n                            })\n                            .catch( err => message.error(err) )\n                    })\n                }\n                <Button shape=\"round\"\n                        danger\n                        icon={ <CloseOutlined/> }\n                        size=\"small\"\n                        onClick={ () => setFormVisibility(false) }\n                />\n                </div>\n            }\n            visible={ isFormVisible }>\n            <Button type=\"primary\"\n                    icon={ <PlusOutlined/> }\n                    ghost={ true }\n                    onClick={ () => setFormVisibility(true) }\n            >\n                Add record\n            </Button>\n        </Popover>,\n        <Button icon={ <DeleteOutlined/> }\n                ghost={ true }\n                danger\n                onClick={ () => {\n                    if (selectedRowKeys.length === 0) message.warning('Nothing is selected')\n                    else Promise.all(selectedRowKeys.map( it =>\n                        EntitiesCRUD_API.delete(entity, it) )).then( () => {\n                        setItems(items.filter( it => !selectedRowKeys.includes(it['id']) ))\n                        message.success('All entities was deleted')\n                    })\n                }}>\n            Remove\n        </Button>\n    ]\n    // да, так делать нельзя, но сроки...\n    switch (entity.split('/').slice(-2)[0]) {\n        case 'dragons':\n            actions.push(\n                <Popover trigger=\"hover\"\n                         onVisibleChange={ visible => {\n                             if (visible) DRAGONS_API.getGroupedByType().then( stat => setDragonsTypeStat(stat) )\n                         } }\n                         content={\n                             Object.keys(dragonsTypeStat).map( it =>\n                                 <Tag color={ DRAGON_TYPE[it] }>{it} = {dragonsTypeStat[it]}</Tag>\n                             )\n                         }\n                         title=\"Count dragons by type\"\n                >\n                    <Button icon={ <DeleteColumnOutlined/> }\n                            ghost={ true }\n                    >\n                        Statistic\n                    </Button>\n                </Popover>\n            )\n            actions.push(\n                <Popover trigger=\"click\"\n                         content={\n                             <Input.Search onSearch={\n                                 id => {\n                                     if (isNaN(id)) message.error('You should write id number of killer')\n                                     else DRAGONS_API.findWithKillerWeakerThen(id)\n                                         .then(data => {\n                                             if (data.length !== 0) setItems(data)\n                                             else message.warning(`There are no dragons with a killer weaker then killer#${id}`)\n                                         })\n                                 }}\n                                           enterButton\n                                           placeholder=\"id\"\n                             />\n                         }\n                >\n                    <Button icon={ <LeftOutlined/> }\n                            ghost={ true }\n                    >\n                        Find with killer weaker then\n                    </Button>\n                </Popover>\n            )\n            break\n        case 'persons':\n            actions.push(\n                <Popover trigger=\"click\"\n                         content={\n                             <Input.Search onSearch={\n                                 name => {\n                                     PERSONS_API.getIncludedInName(name)\n                                         .then(data => {\n                                             if (data.length !== 0) setItems(data)\n                                             else message.warning(`There are no persons included in name ${name}`)\n                                         })\n                                 }}\n                                           enterButton\n                                           placeholder=\"name\"\n                             />\n                         }\n                >\n                    <Button icon={ <MehOutlined/> }\n                            ghost={ true }\n                    >\n                        Find person included in name\n                    </Button>\n                </Popover>\n            )\n            break\n    }\n\n    return <Layout className=\"site-layout\">\n        <Header>\n            <Space>\n                { actions }\n            </Space>\n        </Header>\n        <Content>\n            <Table columns={ mergedColumns }\n                   rowSelection={{\n                       selectedRowKeys,\n                       onChange: selected => setSelectedRowKeys(selected),\n                       selections: [ Table.SELECTION_ALL, Table.SELECTION_INVERT, Table.SELECTION_NONE ]\n                   }}\n                   dataSource={ items }\n                   loading={ isLoading }\n                   components={{\n                       body: { cell: EditableCell }\n                   }}\n                   pagination={{\n                       position: [\"bottomCenter\"] }\n                   }\n            />\n        </Content>\n    </Layout>\n}\nEntityTable.defaultProps = { enumFields: new Map() }\n\nexport default EntityTable","import '../resources/App.css'\nimport { Layout, Menu } from \"antd\"\nimport { DingdingOutlined, UserOutlined } from '@ant-design/icons'\nimport React, { useState } from \"react\"\nimport { EntitiesURLs } from \"../api/EntitiesCRUD_API\"\nimport EntityTable from \"./EntityTable\"\nimport { COLOR } from \"../api/Persons\"\nimport { DRAGON_TYPE } from \"../api/Dragons\"\n\n\nconst ManagementConsole: React.FC = () => {\n    const personsTable = <EntityTable entity={ EntitiesURLs.PERSONS } template={{\n        'id': { type: 'number' },\n        'name': { type: 'string' },\n        'height': { type: 'number' },\n        'weight': { type: 'number' },\n        'passportID': { type: 'string' },\n        'hairColor': {\n            type: 'enum',\n            vals: Object.keys(COLOR)\n        }\n    }}/>\n    const dragonsTable = <EntityTable entity={ EntitiesURLs.DRAGONS } template={{\n        'id': { type: 'number' },\n        'name': { type: 'string' },\n        'creationDate': { type: 'date' },\n        'age': { type: 'number' },\n        'wingspan': { type: 'number' },\n        'color': {\n            type: 'enum',\n            vals: Object.keys(COLOR)\n        },\n        'type': {\n            type: 'enum',\n            vals: Object.keys(DRAGON_TYPE)\n        },\n        'x': { type: 'number' },\n        'y': { type: 'number' },\n        'killerID': { type: 'number' }\n    }}/>\n    const [table, setTable] = useState<JSX.Element>(personsTable)\n    const [menuIsCollapsed, setMenuCollapsed] = useState<boolean>(false)\n    return <Layout style={{ minHeight: '100vh' }}>\n        <Layout.Sider collapsible\n                      collapsed={ menuIsCollapsed }\n                      onCollapse={ () => setMenuCollapsed(!menuIsCollapsed) }\n        >\n            <Menu defaultSelectedKeys={['1']} mode=\"inline\">\n                <Menu.Item icon={<UserOutlined/>}\n                           onClick={() => setTable(personsTable)}\n                >\n                    Persons\n                </Menu.Item>\n                <Menu.Item icon={<DingdingOutlined/>}\n                           onClick={() => setTable(dragonsTable)}\n                >\n                    Dragons\n                </Menu.Item>\n            </Menu>\n        </Layout.Sider>\n        <Layout className=\"site-layout\">\n            <Layout.Content>\n                <div className=\"site-layout-background\" style={{ minHeight: 360 }}>\n                    { table }\n                </div>\n            </Layout.Content>\n            <Layout.Footer style={{ textAlign: \"center\"}}>\n                <a href={ \"https://se.ifmo.ru/~s265570/cv/\" }>\n                    Kulbako Artemy 2021\n                </a>\n            </Layout.Footer>\n        </Layout>\n    </Layout>\n}\n\nexport default ManagementConsole","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './resources/index.css'\nimport ManagementConsole from './components/ManagementConsole'\n\nReactDOM.render(\n    <React.StrictMode>\n        <ManagementConsole />\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}