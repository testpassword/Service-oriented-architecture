{"version":3,"sources":["api/EntityCRUD.ts","utils.ts","components/presenters/Persons.ts","components/presenters/Dragons.ts","components/EntityTable.tsx","components/ManagementConsole.tsx","index.tsx"],"names":["EntitiesURLs","toJson","res","console","log","json","EntityCRUD","entity","fetch","method","then","id","numComp","a","b","key","strComp","length","PERSONS_COLUMNS","title","dataIndex","editable","inputType","sorter","DRAGONS_COLUMNS","EditableCell","editing","children","record","index","restProps","Item","name","style","margin","rules","required","message","EntityTable","columns","Form","useForm","form","useState","items","setItems","isLoading","setIsLoaded","editingKey","setEditingKey","selectedRowKeys","setSelectedRowKeys","isEditing","cancel","save","useEffect","data","map","it","mergedColumns","render","_","onClick","marginRight","onConfirm","Link","disabled","setFieldsValue","col","onCell","className","size","icon","DeleteOutlined","ghost","danger","warning","Promise","all","filter","includes","success","rowSelection","onChange","selected","selections","Table","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","dataSource","loading","components","body","cell","pagination","position","ManagementConsole","personsTable","PERSONS","dragonsTable","DRAGONS","table","setTable","menuIsCollapsed","setMenuCollapsed","minHeight","Sider","collapsible","collapsed","onCollapse","defaultSelectedKeys","mode","UserOutlined","DingdingOutlined","Content","Footer","textAlign","href","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc6b804b.chunk.js","sourcesContent":["const toJson = res => {\n    console.log(res)\n    return res.json()\n}\n\nenum EntitiesURLs {\n    PERSONS = `http://localhost:8080/back-1.0-ULTIMATE/api/persons/`,\n    DRAGONS = `http://localhost:8080/back-1.0-ULTIMATE/api/dragons/`\n}\n\nconst EntityCRUD = {\n\n    getAll: <T>(entity: EntitiesURLs): Promise<T> => {\n        return fetch(entity, { method: 'GET'}).then(toJson)\n    },\n\n    getById: <T>(entity: EntitiesURLs, id: number): Promise<T> => {\n        return fetch(`${entity}${id}`, { method: 'GET' }).then(toJson)\n    },\n\n    updateById: <T>(entity: EntitiesURLs, id: number, modifiedData: object): Promise<T> => {\n        return fetch(`${entity}${id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(modifiedData)\n        }).then(toJson)\n    },\n\n    add: <T>(entity: EntitiesURLs, newbie: object): Promise<T> => {\n        return fetch(entity, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(newbie)\n        }).then(toJson)\n    },\n\n    delete: <T>(entity: EntitiesURLs, id: number): Promise<T> => {\n        return fetch(`${entity}${id}`, { method: 'DELETE' }).then(toJson)\n    },\n}\n\nexport { EntitiesURLs, EntityCRUD, toJson }","const numComp = (a: object, b: object, key: string): number => a[key] - b[key]\nconst strComp = (a: object, b: object, key: string): number => a[key].length - b[key].length\n\nexport { numComp, strComp }","import { numComp, strComp } from \"../../utils\"\nimport {AntdColumn} from \"../EntityTable\";\n\nconst PERSONS_COLUMNS: Array<AntdColumn> = [\n    {\n        title: 'ID',\n        key: 'id',\n        dataIndex: 'id',\n        editable: false,\n        inputType: 'number',\n        sorter: (a, b) => numComp(a, b, 'id')\n    },\n    {\n        title: 'NAME',\n        key: 'name',\n        dataIndex: 'name',\n        editable: true,\n        inputType: 'string',\n        sorter: (a, b) => strComp(a, b, 'name')\n    },\n    {\n        title: 'HEIGHT',\n        key: 'height',\n        dataIndex: 'height',\n        editable: true,\n        inputType: 'number',\n        sorter: (a, b) => numComp(a, b, 'height'),\n    },\n    {\n        title: 'WEIGHT',\n        key: 'weight',\n        dataIndex: 'weight',\n        editable: true,\n        inputType: 'number',\n        sorter: (a, b) => numComp(a, b, 'weight'),\n    },\n    {\n        title: 'PASSPORT_ID',\n        key: 'passportID',\n        dataIndex: 'passportID',\n        editable: true,\n        inputType: 'string',\n        sorter: (a, b) => strComp(a, b, 'passport_id'),\n    },\n    {\n        title: 'HAIR_COLOR',\n        key: 'hairColor',\n        dataIndex: 'hairColor',\n        editable: true,\n        inputType: 'string',\n        sorter: (a, b) => strComp(a, b, 'hairColor'),\n    },\n]\n\nexport default PERSONS_COLUMNS","import { strComp, numComp } from \"../../utils\"\nimport { AntdColumn } from \"../EntityTable\";\n\nconst DRAGONS_COLUMNS: Array<AntdColumn> = [\n    {\n        title: 'ID',\n        key: 'id',\n        dataIndex: 'id',\n        editable: false,\n        inputType: 'number',\n        sorter: (a, b) => numComp(a, b, 'id')\n    },\n    {\n        title: 'NAME',\n        key: 'name',\n        dataIndex: 'name',\n        editable: true,\n        inputType: 'string',\n        sorter: (a, b) => strComp(a, b, 'name')\n    },\n    // TODO: coordinates\n    {\n        title: 'CREATION_DATE',\n        key: 'creationDate',\n        dataIndex: 'creationDate',\n        editable: false,\n        inputType: 'string',\n        sorter: (a, b) => strComp(a, b, 'creation_date')\n        // TODO: dateComp\n    },\n    {\n        title: 'AGE',\n        key: 'age',\n        dataIndex: 'age',\n        editable: true,\n        inputType: 'number',\n        sorter: (a, b) => numComp(a, b, 'age')\n    },\n    {\n        title: 'WINGSPAN',\n        key: 'wingspan',\n        dataIndex: 'wingspan',\n        editable: true,\n        inputType: 'number',\n        sorter: (a, b) => numComp(a, b, 'wingspan')\n    },\n    {\n        title: 'COLOR',\n        key: 'color',\n        dataIndex: 'color',\n        editable: true,\n        inputType: 'string',\n        sorter: (a, b) => strComp(a, b, 'color')\n    },\n    {\n        title: 'TYPE',\n        key: 'type',\n        dataIndex: 'type',\n        editable: true,\n        inputType: 'string',\n        sorter: (a, b) => strComp(a, b, 'type')\n    },\n    {\n        title: 'KILLER_ID',\n        key: 'killer_id',\n        dataIndex: 'killer_id',\n        editable: true,\n        inputType: 'number',\n        sorter: (a, b) => numComp(a, b, 'killer_id')\n    },\n]\n\nexport default DRAGONS_COLUMNS","import React, { useEffect, useState } from \"react\"\nimport { EntitiesURLs, EntityCRUD } from \"../api/EntityCRUD\"\nimport { Table, Input, InputNumber, Popconfirm, Form, Typography, Layout, Space, Button, message } from \"antd\"\nimport { Content, Header } from \"antd/lib/layout/layout\"\nimport { DeleteOutlined } from \"@ant-design/icons\"\n\ninterface AntdColumn {\n    title: string,\n    key: string,\n    dataIndex: string,\n    editable: boolean,\n    inputType: string,\n    sorter: Function\n}\n\nconst EditableCell = ({ editing, dataIndex, title, inputType, record, index, children, ...restProps }) =>\n    <td {...restProps}>\n        {editing ?\n            <Form.Item\n                name={dataIndex}\n                style={{ margin: 0 }}\n                rules={[{ required: true, message: `Please Input ${title}!` }]}\n            >\n                { inputType === \"number\" ? <InputNumber /> : <Input /> }\n            </Form.Item>\n            : children\n        }\n    </td>\n\nconst EntityTable: React.FC<{ entity: EntitiesURLs, columns: Array<object> }> = ({ entity, columns }) => {\n\n    const [form] = Form.useForm()\n    const [items, setItems] = useState<Array<object>>([])\n    const [isLoading, setIsLoaded] = useState<boolean>(true)\n    const [editingKey, setEditingKey] = useState(0)\n    const [selectedRowKeys, setSelectedRowKeys] = useState([])\n\n    const isEditing = (record): boolean => record.key === editingKey\n\n    const cancel = () => setEditingKey(0)\n\n    const edit = (record) => {\n        form.setFieldsValue(record)\n        setEditingKey(record.key)\n    }\n\n    const save = async (key) => {\n        setEditingKey(0)\n        /*try {\n            const row = await form.validateFields()\n            const newData = [...columns]\n            // @ts-ignore\n            const index = newData.findIndex((item) => key === item.key)\n            if (index > -1) newData.splice(index, 1, { ...newData[index], ...row })\n            else newData.push(row)\n            setItems(newData)\n            setEditingKey(0)\n        } catch (errInfo) {\n            // TODO: красочный вывод\n            console.log(\"Validate Failed:\", errInfo);\n        }*/\n    }\n\n    // @ts-ignore\n    useEffect(() => {\n        EntityCRUD.getAll(entity).then( data => {\n            setIsLoaded(false)\n            // @ts-ignore\n            setItems(data.map( it => ({ ...it, key: it.id }) ))\n        })\n    }, [entity])\n\n    // @ts-ignore\n    const mergedColumns = [...columns, {\n        title: \"ACTIONS\",\n        dataIndex: \"actions\",\n        render: ( _, record ) =>\n            isEditing(record) ?\n                <span>\n                    <a onClick={ () => save(record.key) }\n                       style={{ marginRight: 8}}\n                    >\n                        Save\n                    </a>\n                    <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n                        <a>\n                            Cancel\n                        </a>\n                    </Popconfirm>\n                </span>\n                :\n                <Typography.Link disabled={editingKey !== 0}\n                                 onClick={() => {\n                                     form.setFieldsValue(record)\n                                     setEditingKey(record.key)\n                                 }}>\n                    Edit\n                </Typography.Link>\n        // @ts-ignore\n    }].map( (col: AntdColumn) => {\n        return !col.editable ? col : {\n            ...col,\n            onCell: record => ({\n                record,\n                inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n                dataIndex: col.dataIndex,\n                title: col.title,\n                editing: isEditing(record)\n            })\n        }\n    })\n\n    return <Layout className=\"site-layout\">\n        <Header>\n            <Space size={\"middle\"}>\n                <Button icon={<DeleteOutlined/>}\n                        ghost={ true }\n                        danger\n                        onClick={ () => {\n                            if (selectedRowKeys.length === 0) message.warning('Nothing is selected')\n                            else Promise.all(selectedRowKeys.map( it =>\n                                EntityCRUD.delete(entity, it) )).then( () => {\n                                    // @ts-ignore\n                                    setItems(items.filter( it => !selectedRowKeys.includes(it.id) ))\n                                    message.success('All entities was deleted')\n                                }\n                            )\n                        } }>\n                    Remove\n                </Button>\n            </Space>\n        </Header>\n        <Content>\n            {/*@ts-ignore*/}\n            <Table columns={ mergedColumns }\n                   rowSelection={{\n                       selectedRowKeys,\n                       /*@ts-ignore*/\n                       onChange: selected => setSelectedRowKeys(selected),\n                       selections: [ Table.SELECTION_ALL, Table.SELECTION_INVERT, Table.SELECTION_NONE ]\n                   }}\n                   dataSource={ items }\n                   loading={ isLoading }\n                   components={{\n                       body: { cell: EditableCell }\n                   }}\n                   pagination={{\n                       onChange: cancel,\n                       position: [\"bottomCenter\"] }\n                   }\n            />\n        </Content>\n    </Layout>\n}\n\nexport { EntityTable }\nexport type { AntdColumn }\n\n","import '../resources/App.css'\nimport {Layout, Menu} from \"antd\"\nimport { DingdingOutlined, UserOutlined } from '@ant-design/icons'\nimport React, {useState} from \"react\"\nimport { EntitiesURLs } from \"../api/EntityCRUD\"\nimport PERSONS_COLUMNS from \"./presenters/Persons\"\nimport DRAGONS_COLUMNS from \"./presenters/Dragons\"\nimport { EntityTable } from \"./EntityTable\"\n\n\nconst ManagementConsole: React.FC = () => {\n    const personsTable = <EntityTable entity={ EntitiesURLs.PERSONS } columns={ PERSONS_COLUMNS }/>\n    const dragonsTable = <EntityTable entity={ EntitiesURLs.DRAGONS } columns={ DRAGONS_COLUMNS }/>\n    const [table, setTable] = useState<JSX.Element>(personsTable)\n    const [menuIsCollapsed, setMenuCollapsed] = useState<boolean>(false)\n    return <Layout style={{ minHeight: '100vh' }}>\n        <Layout.Sider collapsible\n                      collapsed={ menuIsCollapsed }\n                      onCollapse={ () => setMenuCollapsed(!menuIsCollapsed) }\n        >\n            <Menu defaultSelectedKeys={['1']} mode=\"inline\">\n                <Menu.Item icon={<UserOutlined/>}\n                           onClick={() => setTable(personsTable)}\n                >\n                    Persons\n                </Menu.Item>\n                <Menu.Item icon={<DingdingOutlined/>}\n                           onClick={() => setTable(dragonsTable)}\n                >\n                    Dragons\n                </Menu.Item>\n            </Menu>\n        </Layout.Sider>\n        <Layout className=\"site-layout\">\n            <Layout.Content>\n                <div className=\"site-layout-background\" style={{ minHeight: 360 }}>\n                    { table }\n                </div>\n            </Layout.Content>\n            <Layout.Footer style={{ textAlign: \"center\"}}>\n                <a href={ \"https://se.ifmo.ru/~s265570/cv/\" }>\n                    Kulbako Artemy 2021\n                </a>\n            </Layout.Footer>\n        </Layout>\n    </Layout>\n}\n\nexport default ManagementConsole","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './resources/index.css'\nimport ManagementConsole from './components/ManagementConsole'\n\nReactDOM.render(\n    <React.StrictMode>\n        <ManagementConsole />\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}