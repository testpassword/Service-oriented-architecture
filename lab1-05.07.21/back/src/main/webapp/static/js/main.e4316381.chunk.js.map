{"version":3,"sources":["api/EntityCRUD.ts","components/EntityTable.tsx","components/PresentersGenerator.tsx","components/ManagementConsole.tsx","index.tsx"],"names":["EntitiesURLs","toJson","res","json","EntityCRUD","entity","fetch","method","then","id","EditableCell","editing","dataIndex","title","inputType","children","record","index","restProps","Item","name","style","margin","rules","required","message","EntityTable","columns","Form","useForm","form","useState","items","setItems","isLoading","setIsLoaded","editingKey","setEditingKey","selectedRowKeys","setSelectedRowKeys","isEditing","key","cancel","save","a","useEffect","data","map","it","mergedColumns","render","_","onClick","marginRight","onConfirm","Link","disabled","setFieldsValue","col","editable","onCell","className","size","icon","DeleteOutlined","ghost","danger","length","warning","Promise","all","filter","includes","success","rowSelection","onChange","selected","selections","Table","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","dataSource","loading","components","body","cell","pagination","position","buildColumnsByObject","template","Object","keys","toUpperCase","sorter","item1","item2","b","isParamsTypesEquals","type","every","p","undefined","ManagementConsole","personsTable","PERSONS","dragonsTable","DRAGONS","table","setTable","menuIsCollapsed","setMenuCollapsed","minHeight","Sider","collapsible","collapsed","onCollapse","defaultSelectedKeys","mode","UserOutlined","DingdingOutlined","Content","Footer","textAlign","href","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4316381.chunk.js","sourcesContent":["const toJson = res => res.json()\n\nenum EntitiesURLs {\n    PERSONS = `http://localhost:8080/back-1.0-ULTIMATE/api/persons/`,\n    DRAGONS = `http://localhost:8080/back-1.0-ULTIMATE/api/dragons/`\n}\n\nconst EntityCRUD = {\n\n    getAll: <T>(entity: EntitiesURLs): Promise<T> => {\n        return fetch(entity, { method: 'GET'}).then(toJson)\n    },\n\n    getById: <T>(entity: EntitiesURLs, id: number): Promise<T> => {\n        return fetch(`${entity}${id}`, { method: 'GET' }).then(toJson)\n    },\n\n    updateById: <T>(entity: EntitiesURLs, id: number, modifiedData: object): Promise<T> => {\n        return fetch(`${entity}${id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(modifiedData)\n        }).then(toJson)\n    },\n\n    add: <T>(entity: EntitiesURLs, newbie: object): Promise<T> => {\n        return fetch(entity, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(newbie)\n        }).then(toJson)\n    },\n\n    delete: <T>(entity: EntitiesURLs, id: number): Promise<T> => {\n        return fetch(`${entity}${id}`, { method: 'DELETE' }).then(toJson)\n    },\n}\n\nexport { EntitiesURLs, EntityCRUD, toJson }","import React, { useEffect, useState } from \"react\"\nimport { EntitiesURLs, EntityCRUD } from \"../api/EntityCRUD\"\nimport { Table, Input, InputNumber, Popconfirm, Form, Typography, Layout, Space, Button, message } from \"antd\"\nimport { Content, Header } from \"antd/lib/layout/layout\"\nimport { DeleteOutlined } from \"@ant-design/icons\"\nimport { AntdColumn } from \"./PresentersGenerator\"\n\nconst EditableCell: React.FC<{\n    editing: boolean, dataIndex: string, title: string, inputType: string, record: object, index: number }> =\n    ({ editing, dataIndex, title, inputType, record, index, children, ...restProps }) =>\n    <td {...restProps}>\n        {editing ?\n            <Form.Item\n                name={ dataIndex }\n                style={{ margin: 0 }}\n                rules={[{ required: true, message: `Please Input ${title}!` }]}\n            >\n                { inputType === \"number\" ? <InputNumber /> : <Input /> }\n            </Form.Item>\n            : children\n        }\n    </td>\n\nconst EntityTable: React.FC<{ entity: EntitiesURLs, columns: Array<object> }> =\n    ({ entity, columns }) => {\n\n    const [form] = Form.useForm()\n    const [items, setItems] = useState<Array<object>>([])\n    const [isLoading, setIsLoaded] = useState<boolean>(true)\n    const [editingKey, setEditingKey] = useState(0)\n    const [selectedRowKeys, setSelectedRowKeys] = useState([])\n\n    const isEditing = (record): boolean => record.key === editingKey\n\n    const cancel = () => setEditingKey(0)\n\n    const edit = (record) => {\n        form.setFieldsValue(record)\n        setEditingKey(record.key)\n    }\n\n    const save = async (key) => {\n        setEditingKey(0)\n        /*try {\n            const row = await form.validateFields()\n            const newData = [...columns]\n            // @ts-ignore\n            const index = newData.findIndex((item) => key === item.key)\n            if (index > -1) newData.splice(index, 1, { ...newData[index], ...row })\n            else newData.push(row)\n            setItems(newData)\n            setEditingKey(0)\n        } catch (errInfo) {\n            // TODO: красочный вывод\n            console.log(\"Validate Failed:\", errInfo);\n        }*/\n    }\n\n    // @ts-ignore\n    useEffect(() => {\n        EntityCRUD.getAll(entity).then( data => {\n            setIsLoaded(false)\n            // @ts-ignore\n            setItems(data.map( it => ({ ...it, key: it.id }) ))\n        })\n    }, [entity])\n\n    // @ts-ignore\n    const mergedColumns = [...columns, {\n        title: \"ACTIONS\",\n        dataIndex: \"actions\",\n        render: ( _, record ) =>\n            isEditing(record) ?\n                <span>\n                    <a onClick={ () => save(record.key) }\n                       style={{ marginRight: 8}}\n                    >\n                        Save\n                    </a>\n                    <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n                        <a>\n                            Cancel\n                        </a>\n                    </Popconfirm>\n                </span>\n                :\n                <Typography.Link disabled={editingKey !== 0}\n                                 onClick={() => {\n                                     form.setFieldsValue(record)\n                                     setEditingKey(record.key)\n                                 }}>\n                    Edit\n                </Typography.Link>\n        // @ts-ignore\n    }].map( (col: AntdColumn) => {\n        return !col.editable ? col : {\n            ...col,\n            onCell: record => ({\n                record,\n                inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n                dataIndex: col.dataIndex,\n                title: col.title,\n                editing: isEditing(record)\n            })\n        }\n    })\n\n    return <Layout className=\"site-layout\">\n        <Header>\n            <Space size={\"middle\"}>\n                <Button icon={<DeleteOutlined/>}\n                        ghost={ true }\n                        danger\n                        onClick={ () => {\n                            if (selectedRowKeys.length === 0) message.warning('Nothing is selected')\n                            else Promise.all(selectedRowKeys.map( it =>\n                                EntityCRUD.delete(entity, it) )).then( () => {\n                                    // @ts-ignore\n                                    setItems(items.filter( it => !selectedRowKeys.includes(it.id) ))\n                                    message.success('All entities was deleted')\n                                }\n                            )\n                        } }>\n                    Remove\n                </Button>\n            </Space>\n        </Header>\n        <Content>\n            {/*@ts-ignore*/}\n            <Table columns={ mergedColumns }\n                   rowSelection={{\n                       selectedRowKeys,\n                       /*@ts-ignore*/\n                       onChange: selected => setSelectedRowKeys(selected),\n                       selections: [ Table.SELECTION_ALL, Table.SELECTION_INVERT, Table.SELECTION_NONE ]\n                   }}\n                   dataSource={ items }\n                   loading={ isLoading }\n                   components={{\n                       body: { cell: EditableCell }\n                   }}\n                   pagination={{\n                       onChange: cancel,\n                       position: [\"bottomCenter\"] }\n                   }\n            />\n        </Content>\n    </Layout>\n}\n\nexport { EntityTable }","import { Button, Form, Input, InputNumber } from \"antd\"\nimport React from \"react\"\n\ninterface AntdColumn {\n    title: string,\n    key: string,\n    dataIndex: string,\n    editable: boolean,\n    inputType: string,\n    sorter: Function\n}\n\nconst buildColumnsByObject = (template: object): Array<AntdColumn> =>\n    Object.keys(template).map(it => ({\n        title: it.toUpperCase(),\n        key: it,\n        dataIndex: it,\n        editable: it !== 'id',\n        inputType: template[it],\n        sorter: (item1: object, item2: object) => {\n            const a = item1[it]\n            const b = item2[it]\n            const isParamsTypesEquals = (type: string): boolean => [a, b].every(p => typeof p === type)\n            if (isParamsTypesEquals('number')) return a - b\n            if (isParamsTypesEquals('string')) return a.length - b.length\n            if (isParamsTypesEquals('boolean')) return a && b\n            else return undefined\n        }\n    })).filter( it => it !== undefined && it !== null )\n\nconst buildCreationForm = (template: object, requiredFields: Array<string> = []): JSX.Element =>\n    <Form>\n        {\n            Object.keys(template).map( it =>\n                <Form.Item label={ it.toLowerCase() }\n                           name={ it }\n                           rules={[{ required: requiredFields.includes(it) }]}\n                >\n                    { (template[it] === 'number') ? <InputNumber/> : <Input/> }\n                </Form.Item>)\n        }\n        <Form.Item>\n            <Button type=\"primary\"\n                    htmlType=\"submit\">\n                Submit\n            </Button>\n        </Form.Item>\n    </Form>\n\nexport { buildColumnsByObject, buildCreationForm }\nexport type { AntdColumn }","import '../resources/App.css'\nimport {Layout, Menu} from \"antd\"\nimport { DingdingOutlined, UserOutlined } from '@ant-design/icons'\nimport React, {useState} from \"react\"\nimport { EntitiesURLs } from \"../api/EntityCRUD\"\nimport { EntityTable } from \"./EntityTable\"\nimport { buildColumnsByObject } from \"./PresentersGenerator\"\n\n\nconst ManagementConsole: React.FC = () => {\n    const personsTable = <EntityTable entity={ EntitiesURLs.PERSONS } columns={ buildColumnsByObject({\n        'id': 'number',\n        'name': 'string',\n        'height': 'number',\n        'weight': 'number',\n        'passportID': 'string',\n        'hairColor': 'string'\n    })}/>\n    const dragonsTable = <EntityTable entity={ EntitiesURLs.DRAGONS } columns={ buildColumnsByObject({\n        'id': 'number',\n        'name': 'string',\n        'creationDate': 'string',\n        'age': 'number',\n        'wingspan': 'number',\n        'color': 'string',\n        'type': 'string',\n        'killer_id': 'number'\n    })}/>\n    const [table, setTable] = useState<JSX.Element>(personsTable)\n    const [menuIsCollapsed, setMenuCollapsed] = useState<boolean>(false)\n    return <Layout style={{ minHeight: '100vh' }}>\n        <Layout.Sider collapsible\n                      collapsed={ menuIsCollapsed }\n                      onCollapse={ () => setMenuCollapsed(!menuIsCollapsed) }\n        >\n            <Menu defaultSelectedKeys={['1']} mode=\"inline\">\n                <Menu.Item icon={<UserOutlined/>}\n                           onClick={() => setTable(personsTable)}\n                >\n                    Persons\n                </Menu.Item>\n                <Menu.Item icon={<DingdingOutlined/>}\n                           onClick={() => setTable(dragonsTable)}\n                >\n                    Dragons\n                </Menu.Item>\n            </Menu>\n        </Layout.Sider>\n        <Layout className=\"site-layout\">\n            <Layout.Content>\n                <div className=\"site-layout-background\" style={{ minHeight: 360 }}>\n                    { table }\n                </div>\n            </Layout.Content>\n            <Layout.Footer style={{ textAlign: \"center\"}}>\n                <a href={ \"https://se.ifmo.ru/~s265570/cv/\" }>\n                    Kulbako Artemy 2021\n                </a>\n            </Layout.Footer>\n        </Layout>\n    </Layout>\n}\n\nexport default ManagementConsole","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './resources/index.css'\nimport ManagementConsole from './components/ManagementConsole'\n\nReactDOM.render(\n    <React.StrictMode>\n        <ManagementConsole />\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}