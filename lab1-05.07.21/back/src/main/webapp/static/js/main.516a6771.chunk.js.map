{"version":3,"sources":["api/EntityCRUD.ts","components/PresentersGenerator.tsx","components/EditableCell.tsx","components/EntityTable.tsx","components/ManagementConsole.tsx","index.tsx"],"names":["EntitiesURLs","toJson","res","json","EntityCRUD","entity","fetch","method","then","newbie","headers","body","JSON","stringify","id","buildCreationForm","template","onFinish","enumFields","Map","requiredFields","Object","keys","filter","it","toLowerCase","map","Item","label","name","rules","required","includes","Group","optionType","options","get","type","htmlType","EditableCell","editing","dataIndex","title","inputType","children","record","index","restProps","style","margin","message","EntityTable","columns","toUpperCase","key","editable","sorter","item1","item2","a","b","isParamsTypesEquals","every","p","length","undefined","buildColumnsByObject","Form","useForm","form","useState","items","setItems","isLoading","setIsLoaded","editingKey","setEditingKey","selectedRowKeys","setSelectedRowKeys","isFormVisible","setFormVisibility","searchText","setSearchText","searchedColumn","setSearchedColumn","handleSearch","selectedKeys","confirm","handleReset","clearFilters","isEditing","cancel","save","useEffect","data","catch","err","error","mergedColumns","col","filterDropdown","setSelectedKeys","padding","placeholder","value","onChange","e","target","onPressEnter","marginBottom","display","icon","SearchOutlined","onClick","size","width","filterIcon","filtered","color","onFilter","toString","render","text","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","_","marginRight","onConfirm","Link","disabled","setFieldsValue","onCell","actions","trigger","content","answer","shape","CloseOutlined","visible","PlusOutlined","ghost","DeleteOutlined","danger","warning","Promise","all","success","className","rowSelection","selected","selections","Table","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","dataSource","loading","components","cell","pagination","position","defaultProps","ManagementConsole","personsTable","PERSONS","set","dragonsTable","DRAGONS","table","setTable","menuIsCollapsed","setMenuCollapsed","minHeight","Sider","collapsible","collapsed","onCollapse","defaultSelectedKeys","mode","UserOutlined","DingdingOutlined","Content","Footer","textAlign","href","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.516a6771.chunk.js","sourcesContent":["const toJson = res => res.json()\n\n// change both URLs to http://localhost:8080/back-1.0-ULTIMATE/... before deploy to WAR\n\nenum EntitiesURLs {\n    PERSONS = `http://localhost:8080/api/persons/`,\n    DRAGONS = `http://localhost:8080/api/dragons/`\n}\n\nconst EntityCRUD = {\n\n    getAll: <T>(entity: EntitiesURLs): Promise<T> => {\n        return fetch(entity, { method: 'GET'}).then(toJson)\n    },\n\n    getById: <T>(entity: EntitiesURLs, id: number): Promise<T> => {\n        return fetch(`${entity}${id}`, { method: 'GET' }).then(toJson)\n    },\n\n    updateById: <T>(entity: EntitiesURLs, id: number, modifiedData: object): Promise<T> => {\n        return fetch(`${entity}${id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(modifiedData)\n        }).then(toJson)\n    },\n\n    add: <T>(entity: EntitiesURLs, newbie: object): Promise<T> => {\n        return fetch(entity, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(newbie)\n        }).then(toJson)\n    },\n\n    delete: <T>(entity: EntitiesURLs, id: number): Promise<T> => {\n        return fetch(`${entity}${id}`, { method: 'DELETE' }).then(toJson)\n    },\n}\n\nexport { EntitiesURLs, EntityCRUD, toJson }","import {Button, Form, Input, InputNumber, Radio} from \"antd\"\nimport React from \"react\"\n\ninterface AntdColumn {\n    title: string,\n    key: string,\n    dataIndex: string,\n    editable: boolean,\n    inputType: string,\n    sorter: Function\n}\n\n/**\n * Creates columns for Antd.Table by template\n * @param template - object which contains column name and it's type\n */\nconst buildColumnsByObject = (template: object): Array<AntdColumn> =>\n    Object.keys(template).map(it => ({\n        title: it.toUpperCase(),\n        key: it,\n        dataIndex: it,\n        editable: it !== 'id',\n        inputType: template[it],\n        sorter: (item1: object, item2: object) => {\n            const a = item1[it]\n            const b = item2[it]\n            const isParamsTypesEquals = (type: string): boolean => [a, b].every(p => typeof p === type)\n            if (isParamsTypesEquals('number')) return a - b\n            if (isParamsTypesEquals('string')) return a.length - b.length\n            if (isParamsTypesEquals('boolean')) return a && b\n            else return undefined\n        }\n    })).filter( it => it !== undefined && it !== null )\n\n/**\n * Creates Antd.Form by template\n * @param template - object which contains column name and it's type\n * @param onFinish - action which execute on 'Submit` click\n * @param enumFields - defines which Form.Item was a <RadioInput/>, contains Form.Item name and values\n * @param requiredFields - defines which Form.Item was required for fill\n */\nconst buildCreationForm = (template: object,\n                           onFinish: (any) => void,\n                           enumFields: Map<string, Array<string>> = new Map<string, Array<string>>(),\n                           requiredFields: Array<string> = []): JSX.Element =>\n    <Form onFinish={ onFinish }>\n        {\n            Object.keys(template).filter( it => it.toLowerCase() !== 'id' ).map( it =>\n                <Form.Item label={it.toLowerCase()}\n                           name={it}\n                           rules={[{required: requiredFields.includes(it)}]}\n                >\n                    {\n                        // @ts-ignore\n                        ([...enumFields.keys()].includes(it)) ?\n                            <Radio.Group optionType=\"button\" options={enumFields.get(it)}/> :\n                            (\n                                (template[it] === 'number') ? <InputNumber/> : <Input/>\n                            )\n                    }\n                </Form.Item>\n            )\n        }\n        <Form.Item>\n            <Button type=\"primary\"\n                    htmlType=\"submit\">\n                Submit\n            </Button>\n        </Form.Item>\n    </Form>\n\nexport { buildColumnsByObject, buildCreationForm }\nexport type { AntdColumn }","import React from \"react\"\nimport { Form, Input, InputNumber } from \"antd\"\n\nconst EditableCell: React.FC<{\n    editing: boolean, dataIndex: string, title: string, inputType: string, record: object, index: number }> =\n    ({ editing, dataIndex, title, inputType, record, index, children, ...restProps }) =>\n        <td {...restProps}>\n            {editing ?\n                <Form.Item\n                    name={ dataIndex }\n                    style={{ margin: 0 }}\n                    rules={[{ required: true, message: `Please Input ${title}!` }]}\n                >\n                    { inputType === \"number\" ? <InputNumber /> : <Input /> }\n                </Form.Item>\n                : children\n            }\n        </td>\n\nexport default EditableCell","import React, {lazy, useEffect, useState} from \"react\"\nimport { EntitiesURLs, EntityCRUD } from \"../api/EntityCRUD\"\nimport { Table, Input, Popconfirm, Form, Typography, Layout, Space, Button, message, Popover } from \"antd\"\nimport { Content, Header } from \"antd/lib/layout/layout\"\nimport { CloseOutlined, DeleteOutlined, PlusOutlined, SearchOutlined } from \"@ant-design/icons\"\nimport { AntdColumn, buildColumnsByObject, buildCreationForm } from \"./PresentersGenerator\"\nimport Highlighter from 'react-highlight-words'\nimport EditableCell from \"./EditableCell\"\n\nconst EntityTable: React.FC<{ entity: EntitiesURLs, template: object, enumFields: Map<string, Array<string>> }> =\n    ({ entity, template, enumFields }) => {\n\n    const columns = buildColumnsByObject(template)\n    const [form] = Form.useForm()\n    const [items, setItems] = useState<Array<object>>([])\n    const [isLoading, setIsLoaded] = useState<boolean>(true)\n    const [editingKey, setEditingKey] = useState(0)\n    const [selectedRowKeys, setSelectedRowKeys] = useState<Array<number>>([])\n    const [isFormVisible, setFormVisibility] = useState<boolean>(false)\n    const [searchText, setSearchText] = useState<string>('')\n    const [searchedColumn, setSearchedColumn] = useState<string>('')\n\n    const getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input placeholder={ `Search ${dataIndex}` }\n                       value={ selectedKeys[0] }\n                       onChange={ e => setSelectedKeys(e.target.value ? [e.target.value] : []) }\n                       onPressEnter={ () => handleSearch(selectedKeys, confirm, dataIndex) }\n                       style={{ marginBottom: 8, display: 'block' }}\n                />\n                <Space>\n                    <Button type=\"primary\"\n                            icon={ <SearchOutlined/> }\n                            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\n                            size=\"small\"\n                            style={{ width: 90 }}\n                    >\n                        Search\n                    </Button>\n                    <Button onClick={() => handleReset(clearFilters)}\n                            size=\"small\"\n                            style={{ width: 90 }}\n                    >\n                        Reset\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }}/>,\n        onFilter: (value, record) => record[dataIndex] ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()) : '',\n        render: (text: string) =>\n            searchedColumn === dataIndex ?\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={ [searchText] }\n                    autoEscape\n                    textToHighlight={ text?.toString() ?? '' }\n                />\n             : text\n    })\n\n    const handleSearch = (selectedKeys: Array<string>, confirm: Function, dataIndex: string) => {\n        confirm()\n        setSearchText(selectedKeys[0])\n        setSearchedColumn(dataIndex)\n    }\n\n    const handleReset = clearFilters => {\n        clearFilters()\n        setSearchText('')\n    }\n\n    const isEditing = (record): boolean => record.key === editingKey\n\n    const cancel = () => setEditingKey(0)\n\n    const edit = (record) => {\n        form.setFieldsValue(record)\n        setEditingKey(record.key)\n    }\n\n    const addRecord = data => {\n        EntityCRUD.add(entity, data)\n            // @ts-ignore\n            .then( answer => setItems([...items, {...data, id: answer.id}]))\n            .catch( err => message.error(err) )\n    }\n\n    const save = async key => {\n        setEditingKey(0)\n        /*try {\n            const row = await form.validateFields()\n            const newData = [...columns]\n            // @ts-ignore\n            const index = newData.findIndex((item) => key === item.key)\n            if (index > -1) newData.splice(index, 1, { ...newData[index], ...row })\n            else newData.push(row)\n            setItems(newData)\n            setEditingKey(0)\n        } catch (errInfo) {\n            // TODO: красочный вывод\n            console.log(\"Validate Failed:\", errInfo);\n        }*/\n    }\n\n    useEffect(() => {\n        EntityCRUD.getAll(entity)\n            .then( data => {\n                setIsLoaded(false)\n                // @ts-ignore\n                setItems(data.map( it => ({ ...it, key: it.id }) ))\n            }).catch( err => message.error(err) )\n    }, [entity])\n\n    // @ts-ignore\n    const mergedColumns = [...columns.map( (col: AntdColumn) => ({ ...col, ...getColumnSearchProps(col.dataIndex) })), {\n        title: \"ACTIONS\",\n        dataIndex: \"actions\",\n        render: ( _, record ) =>\n            isEditing(record) ?\n                <span>\n                    <a onClick={ () => save(record.key) }\n                       style={{ marginRight: 8}}\n                    >\n                        Save\n                    </a>\n                    <Popconfirm title=\"Sure to cancel?\" onConfirm={ cancel }>\n                        <a>\n                            Cancel\n                        </a>\n                    </Popconfirm>\n                </span>\n                :\n                <Typography.Link disabled={editingKey !== 0}\n                                 onClick={() => {\n                                     form.setFieldsValue(record)\n                                     setEditingKey(record.key)\n                                 }}>\n                    Edit\n                </Typography.Link>\n        // @ts-ignore\n    }].map( (col: AntdColumn) => {\n        return !col.editable ? col : {\n            ...col,\n            onCell: record => ({\n                record,\n                inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n                dataIndex: col.dataIndex,\n                title: col.title,\n                editing: isEditing(record)\n            })\n        }\n    })\n\n    const actions = [\n        <Popover\n            trigger=\"click\"\n            content={\n                <div>\n                    { buildCreationForm(template, addRecord, enumFields) }\n                    <Button shape=\"round\"\n                            icon={<CloseOutlined/>}\n                            size=\"small\"\n                            onClick={() => setFormVisibility(false)}\n                    />\n                </div>\n            }\n            visible={ isFormVisible }>\n            <Button type=\"primary\"\n                    icon={ <PlusOutlined/> }\n                    ghost={ true }\n                    onClick={ () => {\n                        setFormVisibility(true)\n                    }}\n            >\n                Add record\n            </Button>\n        </Popover>,\n        <Button icon={ <DeleteOutlined/> }\n                ghost={ true }\n                danger\n                onClick={ () => {\n                    if (selectedRowKeys.length === 0) message.warning('Nothing is selected')\n                    else Promise.all(selectedRowKeys.map( it =>\n                        EntityCRUD.delete(entity, it) )).then( () => {\n                        setItems(items.filter( it => !selectedRowKeys.includes(it['id']) ))\n                        message.success('All entities was deleted')\n                    })\n                }}>\n            Remove\n        </Button>\n    ]\n\n    return <Layout className=\"site-layout\">\n        <Header>\n            <Space>\n                { actions }\n            </Space>\n        </Header>\n        <Content>\n            {/*@ts-ignore*/}\n            <Table columns={ mergedColumns }\n                   rowSelection={{\n                       selectedRowKeys,\n                       /*@ts-ignore*/\n                       onChange: selected => setSelectedRowKeys(selected),\n                       selections: [ Table.SELECTION_ALL, Table.SELECTION_INVERT, Table.SELECTION_NONE ]\n                   }}\n                   dataSource={ items }\n                   loading={ isLoading }\n                   components={{\n                       body: { cell: EditableCell }\n                   }}\n                   pagination={{\n                       onChange: cancel,\n                       position: [\"bottomCenter\"] }\n                   }\n            />\n        </Content>\n    </Layout>\n}\nEntityTable.defaultProps = { enumFields: new Map() }\n\nexport default EntityTable","import '../resources/App.css'\nimport {Layout, Menu} from \"antd\"\nimport { DingdingOutlined, UserOutlined } from '@ant-design/icons'\nimport React, { useState } from \"react\"\nimport { EntitiesURLs } from \"../api/EntityCRUD\"\nimport EntityTable from \"./EntityTable\"\n\n\nconst ManagementConsole: React.FC = () => {\n    const personsTable = <EntityTable entity={ EntitiesURLs.PERSONS } template={{\n        'id': 'number',\n        'name': 'string',\n        'height': 'number',\n        'weight': 'number',\n        'passportID': 'string',\n        'hairColor': 'string'\n    }} enumFields={\n        new Map<string, Array<string>>()\n            .set('hairColor', ['GREEN', 'YELLOW', 'BROWN'])\n    }/>\n    const dragonsTable = <EntityTable entity={EntitiesURLs.DRAGONS} template={{\n        'id': 'number',\n        'name': 'string',\n        'creationDate': 'string',\n        'age': 'number',\n        'wingspan': 'number',\n        'color': 'string',\n        'type': 'string',\n        'killer_id': 'number'\n    }} enumFields={\n        new Map<string, Array<string>>()\n            .set('color', ['GREEN', 'YELLOW', 'BROWN'])\n            .set('type', ['WATER', 'AIR', 'FIRE', 'UNKNOWN'])\n    }/>\n    const [table, setTable] = useState<JSX.Element>(personsTable)\n    const [menuIsCollapsed, setMenuCollapsed] = useState<boolean>(false)\n    return <Layout style={{ minHeight: '100vh' }}>\n        <Layout.Sider collapsible\n                      collapsed={ menuIsCollapsed }\n                      onCollapse={ () => setMenuCollapsed(!menuIsCollapsed) }\n        >\n            <Menu defaultSelectedKeys={['1']} mode=\"inline\">\n                <Menu.Item icon={<UserOutlined/>}\n                           onClick={() => setTable(personsTable)}\n                >\n                    Persons\n                </Menu.Item>\n                <Menu.Item icon={<DingdingOutlined/>}\n                           onClick={() => setTable(dragonsTable)}\n                >\n                    Dragons\n                </Menu.Item>\n            </Menu>\n        </Layout.Sider>\n        <Layout className=\"site-layout\">\n            <Layout.Content>\n                <div className=\"site-layout-background\" style={{ minHeight: 360 }}>\n                    { table }\n                </div>\n            </Layout.Content>\n            <Layout.Footer style={{ textAlign: \"center\"}}>\n                <a href={ \"https://se.ifmo.ru/~s265570/cv/\" }>\n                    Kulbako Artemy 2021\n                </a>\n            </Layout.Footer>\n        </Layout>\n    </Layout>\n}\n\nexport default ManagementConsole","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './resources/index.css'\nimport ManagementConsole from './components/ManagementConsole'\n\nReactDOM.render(\n    <React.StrictMode>\n        <ManagementConsole />\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}